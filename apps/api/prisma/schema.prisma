generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator nestgraphql {
    provider                = "node node_modules/prisma-nestjs-graphql"
    output                  = "../src/generated-db-types"
    purgeOutput             = false
    combineScalarFilters    = true
    emitSingle              = true
    noAtomicOperations      = true
    // field validator
    fields_Validator_input  = true
    fields_Validator_output = true
    fields_Validator_model  = true
    fields_Validator_from   = "class-validator"
    // Args where|data nested validator
    decorate_1_type         = "*Args"
    decorate_1_field        = "@(data|where)"
    decorate_1_name         = ValidateNested
    decorate_1_from         = "class-validator"
    decorate_1_arguments    = "[]"
}

model User {
    id String @id @default(uuid())

    /// @Validator.IsEmail()
    email String @unique

    /// @Validator.IsString()
    /// @Validator.MaxLength(100)
    /// @Validator.MinLength(3)
    username String? @unique

    /// @Validator.IsString()
    /// @HideField()
    hashedPassword String?

    /// @Validator.IsString()
    name String?

    /// @Validator.IsString()
    location String?

    /// @Validator.IsString()
    bio String?

    /// @Validator.IsString()
    /// @HideField()
    hashedRefreshToken String?
    createdAt          DateTime   @default(now())
    updatedAt          DateTime   @updatedAt
    //  One to Many: one user has many user books
    userBooks          UserBook[]
    //  One to Many: one user has many shelves
    shelves            Shelf[]

    avatarImage   String?
    emailVerified DateTime?
}

model Rating {
    id       String  @id @default(uuid())
    count    Int?
    source   SOURCE
    maxScore Float
    score    Float
    bookId   String?
    book     Book?   @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Cover {
    id     String  @id @default(uuid())
    url    String  @unique
    size   SIZE
    source SOURCE
    bookId String?
    book   Book?   @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

enum SIZE {
    SMALL
    MEDIUM
    LARGE
}

enum SOURCE {
    GOOGLE
    ISBN_13
    ISBN_10
    GOODREADS
    AMAZON
    OPEN_LIBRARY
}

model Identifier {
    id       String  @id @default(uuid())
    /// @Validator.IsString()
    source   SOURCE
    /// @Validator.IsString()
    sourceId String
    book     Book?   @relation(fields: [bookId], references: [id])
    bookId   String?
}

enum READING_STATUS {
    WANT_TO_READ
    FINISHED
    READING
    DID_NOT_FINISH
    UP_NEXT
}

model UserBook {
    /// @Validator.IsString()
    id        String            @id @unique @default(uuid())
    /// @Validator.IsString()
    userId    String
    /// @Validator.IsString()
    bookId    String            @unique
    /// @Validator.IsString()
    status    READING_STATUS //WANT TO READ, READ, READING, DID NOT FINISH, UP NEXT
    /// @Validator.Min(0)
    /// @Validator.Max(5)
    /// @Validator.IsNumber()
    rating    Float?            @default(0)
    // Many to One: many user books belong to one user when user is deleted all user books are deleted as well
    user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    // Many to One: many user books belong to one book when book
    book      Book              @relation(fields: [bookId], references: [id], onDelete: Cascade)
    /// @Validator.ValidateNested()
    createdAt DateTime          @default(now())
    updatedAt DateTime          @updatedAt
    shelves   UserBookShelves[]
    order     Int               @default(autoincrement())

    dateAdded DateTime
    readDates ReadDate[]

    /// @Validator.IsString()
    /// @Validator.ValidateNested()
    @@unique([userId, bookId], name: "identifier")
}

model ReadingProgress {
    id         String        @id @default(uuid())
    /// @Validator.IsInt()
    capacity   Int
    /// @Validator.IsInt()
    progress   Int
    type       PROGRESS_TYPE
    createdAt  DateTime      @default(now())
    readDate   ReadDate      @relation(fields: [readDateId], references: [id])
    readDateId String        @unique
}

enum PROGRESS_TYPE {
    PAGES
    PERCENTAGE
}

model ReadDate {
    id              String           @id @default(uuid())
    startDate       DateTime         @default(now())
    finishedDate    DateTime?
    active          Boolean
    readingProgress ReadingProgress?
    userBook        UserBook?        @relation(fields: [userBookId], references: [id])
    userBookId      String?
}

model Book {
    /// @Validator.IsString()
    id            String       @id @default(uuid())
    /// @Validator.IsString()
    slug          String       @unique
    /// @Validator.IsString()
    title         String
    /// @Validator.IsString()
    subtitle      String?
    /// @Validator.IsString()
    authors       String[]
    /// @Validator.IsString()
    yearPublished String?
    /// @Validator.IsInt()
    pageCount     Int?
    /// @Validator.IsString()
    identifiers   Identifier[]

    /// @Validator.ValidateNested()
    userBook UserBook?
    // logs     AuditLog[]

    covers  Cover[]
    ratings Rating[]
}

model UserBookShelves {
    userBook   UserBook @relation(fields: [userBookId], references: [id], onDelete: Cascade)
    userBookId String
    shelf      Shelf    @relation(fields: [shelfId], references: [id], onDelete: Cascade)
    shelfId    String

    @@id([userBookId, shelfId])
}

model Shelf {
    /// @Validator.IsString()
    id        String            @id @default(uuid())
    /// @Validator.IsString()
    slug      String            @unique
    /// @Validator.IsString()
    name      String
    /// @Validator.IsString()
    userId    String?
    dateTime  String?
    // Many to One: many shelves belong to one user when user is deleted all shelves are deleted as well
    user      User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
    // Many to Many: a single shelf can be associated with multiple userBooks,
    userBooks UserBookShelves[]

    /// @Validator.IsString()
    /// @Validator.ValidateNested()
    @@unique(fields: [userId, name], name: "identifier")
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}
